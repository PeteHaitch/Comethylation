{"name":"methtuple","tagline":"methtuple is a methylation caller for methylation events that co-occur on the same DNA fragment from high-throughput bisulfite sequencing data, such as methylC-seq","body":"[![Build Status](https://travis-ci.org/PeteHaitch/methtuple.png?branch=master)](https://travis-ci.org/PeteHaitch/methtuple)\r\n# methtuple\r\n\r\n## Overview\r\n\r\n### What does it do?\r\n\r\n`methtuple` allows the user to investigate the co-occurence of methylation marks at the level of individual DNA fragments. It does this by performing methylation calling at _m-tuples_ of methylation loci from high-throughput bisulfite sequencing data, such as _methylC-seq_. In short, `methtuple` extracts and tabulates the methylation states of all m-tuples from a `BAM` file (for a user-defined value of _m_).\r\n\r\n### Why would I want to do that?\r\n\r\nA typical read from a bisulfite-sequencing experiment reports a binary methylated or unmethylated measurement at multiple loci. Each read originates from a single cell. Because methylation calls are made from individual reads/read-pairs, we can investigate the co-occurence of methylation events at the level of individual DNA fragments.\r\n\r\nI have been using `methtuple` to investigate the spatial dependence of DNA methylation at the level of individual DNA fragments by studying methylation patterns of CpG 2-tuples. `methtuple` can also be used as a drop-in replacement for `bismark_methylation_extractor` while also providing enhanced filtering options and a slightly faster runtime (10-20% faster, albeit with an increased memory usage).\r\n\r\n### What is an m-tuple?\r\n\r\nThe simplest _m-tuple_ is the 1-tuple (_m_ = 1). `methtuple` tabulates the number of reads that are methylated (_M_) and unmethylated (_U_) for each methylation 1-tuple in the genome. 1-tuples are the type of methylation calling performed by most methylation calling software such as Bismark's `bismark_methylation_extractor`.\r\n\r\nA 2-tuple (_m_ = 2) is a pair of methylation loci. `methtuple` tabulates the number of reads that methylated at each locus in the pair (_MM_), both unmethylated (_UU_) or methylated at one locus but not the other (_MU_ or _UM_). This idea readily extends to 3-tuples, 4-tuples, etc.\r\n\r\nIn its default settings, and with _m_ > 1, `methtuple` tries to create only m-tuples made of \"neighbouring\" loci. However, please see the example below for why I say this only \"tries\" to create m-tuples of neighbouring loci. For a DNA fragment containing _k_ methylation loci there are _m - k + 1_ m-tuples made of neighbouring loci.\r\n\r\nAlternatively, we can create all combinations of m-tuples by using the `--all-combinations` flag. For a DNA fragment containing _k_ methylation loci there are \"_k_ choose _m_\" m-tuples when using `--all-combinations`, a number that grows rapidly in _k_, particularly when _m_ is close to _k/2_.\r\n\r\nRegardless of how m-tuples are constructed, `methtuple` always takes care to only count each methylation locus once when it has been twice-sequenced by overlapping paired-end reads.\r\n\r\n### Draw me a picture\r\n\r\nWell, I hope ASCII art will do.\r\n\r\nSuppose we sequence a region of the genome containing five methylation loci with three paired-end reads (`A`, `B` and `C`):\r\n\r\n```\r\nref: 1    2   3 4 5\r\nA_1: |----->\r\nA_2:         <------|\r\nB_1:\r\nB_2: |----->   <----|\r\nC_1:    |----->\r\nC_2:      <------|\r\n```\r\n\r\nIf we are interested in 1-tuples, then we would obtain the following from each read by running `methtuple`:\r\n\r\n```\r\nA: {1}, {2}, {3}, {4}, {5}\r\nB: {1}, {2}, {4}, {5}\r\nC: {2}, {3}, {4}\r\n```\r\n\r\nThis result is true regardless of whether the `--all-combinations` flag is set.\r\n\r\nIf we are interested in 3-tuples, then we would obtain the following from each read by running `methtuple` in its default mode:\r\n\r\n```\r\nA: {1, 2, 3}, {2, 3, 4}, {3, 4, 5}\r\nB: {1, 2, 4}, {2, 4, 5}\r\nC: {2, 3, 4}\r\n```\r\n\r\nThings to note:\r\n\r\n* Read-pair `A` sequences all three (= 5 - 3 + 1) \"neighbouring\" 3-tuples\r\n* Read-pair `B` sequences none of the \"neighbouring\" 3-tuples but does \"erroneously\" construct two non-neighbouring 3-tuples. This happens because m-tuples are created independently from each read-pair; effectively, read-pair `B` is \"unaware\" of methylation locus `3`. Depending on the downstream analysis, you may want to _post-hoc_ filter out these \"non-neighbouring\" m-tuples.\r\n* The twice-sequenced methylation loci, `2` and `3`, in read-pair `C` are not double counted.\r\n\r\nHowever, if we were to run `methtuple` with `--all-combinations` then we would obtain:\r\n\r\n```\r\nA: {1, 2, 3}, {2, 3, 4}, {3, 4, 5}, {1, 2, 4}, {1, 2, 5}, {1, 3, 4}, {1, 3, 5}, {1, 4, 5}, {2, 3, 5}, {2, 4, 5}\r\nB: {1, 2, 4}, {2, 4, 5}, {1, 2, 5}, {1, 4, 5}\r\nC: {2, 3, 4}\r\n```\r\n\r\n## Installation and dependencies\r\n\r\nSimply running\r\n\r\n```\r\npython setup.py install\r\n```\r\nin the root `methtuple` directory should work for most systems.\r\n\r\n`methtuple` is written in Python and relies upon the `pysam` module. Running `python setup.py install` will attempt to install `pysam` if it isn't found on your system. Alternatively, instructions for installing `pysam` are available from [https://github.com/pysam-developers/pysam](https://github.com/pysam-developers/pysam).\r\n\r\n`pysam` is currently undergoing an extensive re-design. I have tested and used `methtuple` with Python 2.7 and `pysam` version >= 0.7.5. It should also work on Python 3.2, 3.3 and 3.4 with the current version of `pysam` (`v0.8.0`), as indicated by the [Travis-CI builds](https://travis-ci.org/PeteHaitch/methtuple).\r\n\r\n## Usage\r\n\r\n### Basic usage\r\n\r\n`methtuple` processes a single `BAM` file and works for both single-end and paired-end sequencing data. Example `BAM` files from single-end directional and paired-end directional bisulfite-sequencing experiments are available in the `data/` directory.\r\n\r\nMethylation measurements may be filtered by base quality or other criteria such as the mapping quality of the read or whether the read is marked as a PCR duplicate. For a full list of filtering options, please run `methtuple --help` or see the __Advanced Usage__ section below.\r\n\r\nCurrently, the BAM file must have been created with [Bismark](http://www.bioinformatics.bbsrc.ac.uk/projects/download.html#bismark). If the data were aligned with Bismark version < 0.8.3 please use the `--aligner Bismark_old` flag. Please file an issue if you would like to use a `BAM` file created with another aligner and I will do my best to support it.\r\n\r\nThe main options to pass `methtuple` are the size of the m-tuple (`-m`); the type of methylation, which is some combination of _CG_, _CHG_, _CHH_ and _CNN_ (`--methylation-type`); any filters to be applied to reads or positions within reads (see below); the BAM file; and the sample name, which will be used as a prefix for all output files. Multiple methylation types may be specified jointly, e.g., `--methylation-type CG --methylation-type CHG`\r\n\r\n### Output\r\n\r\nThree output files are created and summary information is written to `STDOUT`. The main output file is a tab-delimited file of all m-tuples, `<in>.<--methylation-type>.<-m>.tsv`, where `<in>` is the prefix of the `<in.bam>` BAM file.\r\n\r\nHere are the first 5 rows (including with the header row) from `data/se_directional.fq.gz_bismark_bt2.CG.2.tsv`, which is created by running the single-end directional example shown below:\r\n\r\n```\r\nchr     strand  pos1    pos2    MM      MU      UM      UU\r\nchr1    +       6387768 6387783 1       0       0       0\r\nchr1    +       7104116 7104139 1       0       0       0\r\nchr1    +       7104139 7104152 1       0       0       0\r\nchr1    +       9256170 9256179 0       0       0       1\r\n```\r\n\r\nSo, for example, at the CpG 2-tuple chr1:+:(6,387,768, 6,387,783) we observed 1 read that was methylated at chr1:+:6,387,768 and methylated at chr1:+:6,387,783.\r\n\r\nThe `strand` is recorded as `+` (forward strand, \"OT\" in Bismark), `-` (reverse strand, \"OB\" in Bismark) or `*`, meaning not applicable (if the `--strand-collapse` option is set). The position of all methylation loci is always with respect to the forward strand.\r\n\r\nThe second file (`<in>.<--methylation-type>_per_read.hist`) is a text histogram of the number of methylation loci per read/readpair (of the type specified by `--methylation-type`) that passed the filters specified at runtime of `methtuple`.\r\n\r\nHere is the file `data/se_directional.fq.gz_bismark_bt2.CG_per_read.hist`, which is created by running the single-end directional example shown below:\r\n\r\n```\r\nn       count\r\n0       4561\r\n1       2347\r\n2       789\r\n3       296\r\n4       144\r\n5       61\r\n6       29\r\n7       19\r\n8       3\r\n9       4\r\n10      2\r\n11      1\r\n12      3\r\n13      4\r\n14      1\r\n18      2\r\n```\r\nSo, 4,561 reads aligned to a position containing no CpGs while 2 reads aligned to a position containing 18 CpGs.\r\n\r\nAn optional third and final file (`<in>.reads_that_failed_QC.txt>`) records the querynames (`QNAME`) of all reads that failed to pass quality control filters and which filter the read failed. This file may be omitted by use of the `--no-failed-filter-file` flag.\r\n\r\nIn this case we didn't set any quality control filters and so this file is empty.\r\n\r\n### Examples\r\n\r\nTwo small example datasets are included in the `data/` directory. Included are the `FASTQ` files and the `BAM` files generated with __Bismark__ in __Bowtie2__ mode. More details of the example datasets can be found in `data/README.md`\r\n\r\nAlthough the example datasets are both from directional bisulfite-sequencing protocols, `methtuple` also works with data from non-directional bisulfite-sequencing protocols.\r\n\r\n#### Single-end reads\r\n\r\nThe following command will extract all CpG 2-tuples from the file `data/se_directional.bam`:\r\n\r\n```\r\nmethtuple -m 2 --methylation-type CG data/se_directional.fq.gz_bismark_bt2.bam\r\n```\r\n\r\nThis results in 3 files:\r\n\r\n* `data/se_directional.fq.gz_bismark_bt2.CG.2.tsv`\r\n* `data/se_directional.fq.gz_bismark_bt2.CG_per_read.hist`\r\n* `data/se_directional.fq.gz_bismark_bt2.reads_that_failed_QC.txt`\r\n\r\n#### Paired-end reads\r\n\r\nPaired-end data must firstly be sorted by queryname prior to running `methtuple`. `BAM` files created by Bismark, such as `data/pe_directional.bam`, are already sorted by queryname. So, to extract all CG/CHH 3-tuples we would simply run:\r\n\r\n```\r\nmethtuple -m 3 --methylation-type CG --methylation-type CHH data/pe_directional_1.fq.gz_bismark_bt2_pe.bam\r\n```\r\n\r\nThis results in 3 files:\r\n\r\n* `data/pe_directional_1.fq.gz_bismark_bt2_pe.CG_CHH.3.tsv`\r\n* `data/pe_directional_1.fq.gz_bismark_bt2_pe.CG_CHH_per_read.hist`\r\n* `data/pe_directional_1.fq.gz_bismark_bt2_pe.reads_that_failed_QC.txt`\r\n\r\n##### Note on sort-order of paired-end BAM files\r\n\r\nIf your paired-end BAM file is sorted by genomic coordinates, then you must first sort the `BAM` by queryname and then run `methtuple` on the queryname-sorted `BAM`. This can be done by using `samtools sort` with the `-n` option or Picard's `SortSam` function with the `SO=queryname` option:\r\n\r\n```\r\n# Create a coordinate-sorted BAM for the sake of argument\r\nsamtools sort data/pe_directional_1.fq.gz_bismark_bt2_pe.bam data/cs_pe_directional_1.fq.gz_bismark_bt2_pe\r\n# Re-sort the coordinate-sorted BAM by queryname\r\nsamtools sort -n data/cs_pe_directional_1.fq.gz_bismark_bt2_pe.bam data/qs_pe_directional_1.fq.gz_bismark_bt2_pe\r\n# Run methtuple on the queryname sorted BAM\r\nmethtuple -m 3 --methylation-type CG --methylation-type CHG data/qs_pe_directional_1.fq.gz_bismark_bt2_pe.bam\r\n```\r\n\r\n### Memory usage and running time\r\n\r\nFor a rough indication of performance, here are the results for processing approximately 40,000,000 100bp paired-end reads from chr1 of a 20-30x coverage whole-genome methylC-seq experiment of human data. This analysis used a single AMD Opteron 6276 CPU (2.3GHz) on a shared memory system.\r\n\r\n#### `-m 2`\r\n\r\nMemory usage peaked at 1.9GB and the running time was approximately 5 hours.\r\n\r\n#### `-m 2 --all-combinations`\r\n\r\nMemory usage peaked at 7GB and the running time was approximately 5.5 hours.\r\n\r\nUse of the `--all-combinations` flag creates all possible m-tuples, including non-neighbouring ones. This produces many more m-tuples and so increases the memory usage.\r\n\r\n#### `-m 5`\r\n\r\nMemory usage peaked at 1.5GB and the running time was approximately 4.3 hours.\r\n\r\n### Helper script\r\n\r\nI frequently work with large, coordinate-sorted `BAM` files. To speed up the extraction of m-tuples, I use a simple parallelisation strategy with [GNU parallel](http://www.gnu.org/software/parallel/). The idea is to split the `BAM` file into chromosome-level `BAM` files, process each chromosome-level `BAM` separately and then recombine these chromosome-level files into a genome-level file. The script `helper_scripts/run_methtuple.sh` implements this strategy; simply edit the key variables in this script or adapt it to your own needs. Please check the requirements listed in `helper_scripts/run_methtuple.sh`.\r\n\r\n#### Warnings\r\n\r\n* __WARNING__: This simple strategy uses as many cores as there are chromosomes. This can result in __very__ large memory usage, depending on the value of `-m`, and may cause problems if you have more chromosomes than available cores.\r\n* __WARNING__: The script `tabulate_hist.R` must be in the same directory as `run_methtuple.sh`\r\n\r\n### Advanced usage\r\n\r\nA full list of options is available by running `methtuple --help`:\r\n\r\n```\r\nusage: methtuple [options] <in.bam>\r\nPlease run 'methtuple -h' for a full list of options.\r\n\r\nExtract methylation patterns at m-tuples of methylation loci from the aligned\r\nreads of a bisulfite-sequencing experiment. Currently only supports BAM files\r\ncreated with Bismark.\r\n\r\nInput options:\r\n  --aligner {Bismark,Bismark_old}\r\n                        The aligner used to generate the BAM file. Bismark_old\r\n                        refers to Bismark version < 0.8.3 (default: Bismark)\r\n  --Phred64             Quality scores are encoded as Phred64 rather than\r\n                        Phred33 (default: False)\r\n\r\nOutput options:\r\n  -o <text>, --output-prefix <text>\r\n                        By default, all output files have the same prefix as\r\n                        that of the input file. This will override the prefix\r\n                        of output file names\r\n  --sc, --strand-collapse\r\n                        Collapse counts across across Watson and Crick\r\n                        strands. Only possible for CG methylation type. The\r\n                        strand is recorded as '*' if this option is selected.\r\n                        (default: False)\r\n  --nfff, --no-failed-filter-file\r\n                        Do not create the file listing the reads that failed\r\n                        to pass to pass the filters and which filter it failed\r\n                        (default: False)\r\n  --gzip                gzip all output files. --gzip and --bzip2 are mutually\r\n                        exclusive (default: False)\r\n  --bzip2               bzip2 all output files. --gzip and --bzip2 are\r\n                        mutually exclusive (default: False)\r\n\r\nConstruction of methylation loci m-tuples:\r\n  --mt {CG,CHG,CHH,CNN}, --methylation-type {CG,CHG,CHH,CNN}\r\n                        The methylation type. Multiple methylation types may\r\n                        be analysed jointly by repeated use of this argument,\r\n                        e.g., --methylation-type CG --methylation-type CHG\r\n                        (default: ['CG'])\r\n  -m <int>              The size of the m-tuples, i.e., the 'm' in m-tuples\r\n                        (default: 1)\r\n  --ac, --all-combinations\r\n                        Create all combinations of m-tuples, including non-\r\n                        neighbouring m-tuples. WARNING: This will greatly\r\n                        increase the runtime and memory usage, particularly\r\n                        for larger values of -m and when analysing non-CG\r\n                        methylation (default: False)\r\n\r\nFiltering of reads:\r\n  Applied before filtering of bases\r\n\r\n  --id, --ignore-duplicates\r\n                        Ignore reads that have been flagged as PCR duplicates\r\n                        by, for example, Picard's MarkDuplicates function.\r\n                        More specifically, ignore reads with the 0x400 bit in\r\n                        the FLAG (default: False)\r\n  --mmq <int>, --min-mapq <int>\r\n                        Ignore reads with a mapping quality score (mapQ) less\r\n                        than <int> (default: 0)\r\n  --of {sequence_strict,sequence,XM_strict,XM,XM_ol,quality,Bismark}, --overlap-filter {sequence_strict,sequence,XM_strict,XM,XM_ol,quality,Bismark}\r\n                        overlap_check: The type of check to be performed\r\n                        (listed roughly from most-to-least stringent): Ignore\r\n                        the read-pair if the sequence in the overlap differs\r\n                        between mates (sequence_strict); Ignore the\r\n                        overlapping region if the sequence in the overlap\r\n                        differs between mates (sequence); Ignore the read-pair\r\n                        if the XM-tag in the overlap differs (XM_strict);\r\n                        Ignore the overlapping region if the XM-tag in the\r\n                        overlap differs between mates (XM); Ignore any\r\n                        positions in the overlapping region where the XM-tags\r\n                        differ between the mates (XM_ol); Use the mate with\r\n                        the higher average quality basecalls in the\r\n                        overlapping region (quality); Use the first mate of\r\n                        each read-pair, i.e., the method used by\r\n                        bismark_methylation_extractor with the --no_overlap\r\n                        flag (Bismark) (default: XM_ol)\r\n  --uip, --use-improper-pairs\r\n                        Use the improper read-pairs, i.e. don't filter them.\r\n                        More specifically, check the 0x2 FLAG bit of each\r\n                        read; the exact definition of an improper read-pair\r\n                        depends on the aligner and alignment parameters\r\n                        (default: False)\r\n\r\nFiltering of bases:\r\n  Applied after filtering of reads\r\n\r\n  --ir1p VALUES, --ignore-read1-positions VALUES\r\n                        If single-end data, ignore these read positions from\r\n                        all reads. If paired-end data, ignore these read\r\n                        positions from just read_1 of each pair. Multiple\r\n                        values should be comma-delimited, ranges can be\r\n                        specified by use of the hyphen and all positions\r\n                        should use 1-based co-ordinates. For example,\r\n                        1-5,80,95-100 corresponds to ignoring read-positions\r\n                        1, 2, 3, 4, 5, 80, 98, 99, 100. (default: None)\r\n  --ir2p VALUES, --ignore-read2-positions VALUES\r\n                        Ignore these read positions from just read_2 of each\r\n                        pair if paired-end sequencing. Multiple values should\r\n                        be comma-delimited, ranges can be specified by use of\r\n                        the hyphen and all positions should use 1-based co-\r\n                        ordinates. For example, 1-5,80,95-100 corresponds to\r\n                        ignoring read-positions 1, 2, 3, 4, 5, 80, 98, 99,\r\n                        100. (default: None)\r\n  --mbq <int>, --min-base-qual <int>\r\n                        Ignore read positions with a base quality score less\r\n                        than <int> (default: 0)\r\n\r\nOther:\r\n  -v, --version         show program's version number and exit\r\n  -h, --help            show this help message and exit\r\n\r\nmethtuple (v1.4.0) by Peter Hickey (peter.hickey@gmail.com,\r\nhttps://github.com/PeteHaitch/methtuple/)\r\n```\r\n\r\n## Limitations and notes\r\n\r\nThese are current limitations and their statuses:\r\n\r\n### Only works with data aligned with the __Bismark__ mapping software\r\n\r\n`methtuple` makes use of Bismark's custom SAM tags `XM`, `XR` and `XG`. The `XM` tag is used to infer the methylation state of each sequenced cytosine while the `XR` and `XG` tags are used to infer the orientation and strand of the alignment. If the data were aligned with Bismark version < 0.8.3 please use the `--oldBismark` flag.\r\n\r\nPlease file an issue if you would like to use a `BAM` file created with another aligner and I will do my best to support it; also, see [Issue #30](https://github.com/PeteHaitch/methtuple/issues/30)\r\n\r\n### Paired-end data must be sorted by queryname\r\n\r\nThis is required in order to avoid lookups when finding the mate of a paired-end read.\r\n\r\nThe `BAM` file created by Bismark is natively in queryname order and so this is not a problem. If the file is not in queryname order then use `samtools sort` with the `-n` option or Picard's `SortSam` function with `SO=queryname` to sort your `BAM` by queryname. The helper script `helper_scripts/run_methtuple.sh` works with a coordinate-sorted `BAM` file and does so by including a step to sort the chromosome-level `BAM` files by queryname using Picard's `SortSam`.\r\n\r\n### The `--aligner Bismark_old` option is a bit crude\r\n\r\nSpecifically, it assumes that there are no '/' characters in the read names (`QNAME`) and that the BAM has not been processed with any other programs, e.g. Picard's MarkDuplicates, that might change the `FLAG` field. Please file an issue or submit a pull request if you would like this improved.\r\n\r\n### Construction of \"non-neighbouring\" m-tuples\r\n\r\nAs discussed in the above example, `methtuple` tries not to create \"non-neighbouring\" m-tuples, however, these do occur due to m-tuples being created independently from each read/read-pair. I do not make use of non-neighbouring m-tuples in my downstream analyses and so I _post-hoc_ filter these out.\r\n\r\nIf you would like the option to create all possible m-tuples, both \"neighbouring\" and \"non-neighbouring\", please let me know at [https://github.com/PeteHaitch/methtuple/issues/85](https://github.com/PeteHaitch/methtuple/issues/85) as there is a simple solution that just awaits motivation for me to implement it.\r\n\r\n### Choice of `--overlap-filter`\r\n\r\nThe two mates of a paired-end read, `read_1` and `read_2`, often overlap in bisulfite-sequencing data. `methtuple` ensures that the overlapping sequence isn't double-counted and offers several different choices of how overlapping paired-end reads are processed via the `--overlap-filter` flag. Listed roughly from most-to-least stringent these are:\r\n\r\n1. `sequence_strict`: Check that the entire overlapping sequence is identical; if not identical then do not use any methylation calls from the entire read-pair.\r\n2. `sequence`: Check that the entire overlapping sequence is identical; if not identical then do not use any methylation calls from the overlap.\r\n3. `XM_strict`: Check that the XM-tag is identical for the overlapping region; if not identical then do not use any methylation calls from the entire read-pair.\r\n4. `XM`: Check that the XM-tag is identical for the overlapping region; if not identical then do not use any methylation calls from the overlap.\r\n5. `XM_ol`: Check that the XM-tag is identical for the overlapping region; if not identical then exclude those positions of disagreement and count once the remaining positions in the overlap.\r\n6. `quality`: No check of the overlapping bases; simply use the read with the higher average quality basecalls in the overlapping region.\r\n7. `Bismark`: No check of the overlapping bases; simply use the overlapping bases from read_1, i.e., the method used by `bismark_methylation_extractor` with the `--no_overlap` flag.\r\n\r\n### Other notes\r\n\r\n* Bismark-Bowtie1 always sets the mapping quality (`mapQ`) as the value 255, which means unavailable in the SAM format specification. Thus the `--min-mapq` option will not have any effect for Bismark-Bowtie1 data.\r\n* `methtuple` skips paired-end reads where either mate is unmapped.\r\n\r\n## Acknowledgements\r\n\r\nA big thank you to [Felix Krueger](http://www.bioinformatics.babraham.ac.uk/people.html) (the author of Bismark) for his help in understanding mapping of bisulfite-sequencing data and for answering my many questions along the way.\r\n\r\nThanks also to Tobias Sargeant ([@folded](https://github.com/folded)) for his help in turning the original `methtuple.py` script into the current Python module `methtuple` and for help in setting up a testing framework.\r\n\r\n## Questions and comments\r\n\r\nPlease use the [GitHub Issue Tracker](www.github.com/PeteHaitch/methtuple) to file bug reports or request new functionality. I welcome questions and comments; you can email me at <peter.hickey@gmail.com>.\r\n","google":"UA-47957729-1","note":"Don't delete this file! It's used internally to help with page regeneration."}